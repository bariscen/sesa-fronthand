import streamlit as st
import numpy as np
import pandas as pd
import os
from pathlib import Path
import requests
import pickle
import matplotlib.pyplot as plt
import seaborn as sns
import streamlit as st
from app.function import read_gcs_blob_content

# Bu dosyanÄ±n bulunduÄŸu dizin (app.py'nin dizini)
current_dir = Path(__file__).parent.parent

# row-data yolunu oluÅŸtur
image_path_for_logo = current_dir.parent / "row-data" / "sesa-logo-80-new.png"

# Logoyu sakla
if 'logo_image_path' not in st.session_state:
    st.session_state.logo_image_path = str(image_path_for_logo)

st.image(st.session_state.logo_image_path, width=200)

st.markdown("""
    <style>
    .stApp {
        background-color: #d3d3d3;
    }
    </style>
    """, unsafe_allow_html=True)


sektor = read_gcs_blob_content("sektor")

if sektor is not None:
    st.write("Veri Seti YÃ¼klendi. âœ…")

else:
    st.error("verisi Ã§ekilemedi.")

if sektor is not None and not sektor.empty:
    # Tarih ve yÄ±l ayÄ±rÄ±mÄ±
    sektor['month_start'] = pd.to_datetime(sektor['month_start'])
    sektor['Year'] = sektor['month_start'].dt.year
    sektor['Month'] = sektor['month_start'].dt.month
    sektor['Month_Name'] = sektor['month_start'].dt.strftime('%b')

    st.header("ğŸ“ˆ Ã–nÃ¼mÃ¼zdeki AyÄ±n GeÃ§en Senelerde ki PerformansÄ±")

    # --- Analiz Edilecek Hedef AyÄ± Belirleme ---
    last_data_month = sektor['month_start'].max()
    target_month_date = last_data_month + pd.DateOffset(months=1)
    target_month_num = target_month_date.month
    target_month_name = target_month_date.strftime('%b')

    st.write(f"**Analiz edilecek hedef ay:** {target_month_name} (Ay NumarasÄ±: {target_month_num})")

    # Hedef aya ait veriler
    df_target_month = sektor[sektor['Month'] == target_month_num]

    # Pivot tablo oluÅŸtur
    df_pivot = df_target_month.pivot_table(index='unique_id', columns='Year', values='monthly_total')

    st.write("Ã–nÃ¼mÃ¼zdeki AyÄ±n GeÃ§en Senelerde ki KilolarÄ±:")
    st.dataframe(df_pivot)
